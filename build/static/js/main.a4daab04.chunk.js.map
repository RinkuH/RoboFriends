{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","Cardlist","data","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","robots","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCASC,EAhBF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAGxB,OAEI,yBAAKC,UAAY,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,gCAAMF,GACN,gCAAMC,MCkBPK,EA1BE,SAAC,GAAW,IAAVC,EAAS,EAATA,KAEf,OACI,6BAEIA,EAAKC,KAAI,SAACC,GAEN,OAEI,kBAAC,EAAD,CACIC,IAAKD,EAAMP,GACXA,GAAIO,EAAMP,GACVF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,aCEtBU,EAhBG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,yBAAKT,UAAU,OACf,2BACIA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCPI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAASC,OAAQ,kBAAmBC,OAAO,UACjEJ,EAAMK,WCiDAC,E,YA/CX,aAAc,IAAD,8BACT,+CAcHC,eAAiB,SAACC,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAdzC,EAAKC,MAAM,CACPC,OAAO,GACPJ,YAAY,IAJP,E,iFAQO,IAAD,OAEfK,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,OAAOK,S,+BAQpC,IAAD,EAEgCC,KAAKP,MAA7BC,EAFR,EAEQA,OAAQJ,EAFhB,EAEgBA,YAEVW,EAAiBP,EAAOQ,QAAO,SAAA9B,GACrC,OAAOA,EAAMT,KAAKwC,cAAcC,SAASd,EAAYa,kBAGrD,OAAKT,EAAOW,OAIJ,yBAAKvC,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWS,aAAcyB,KAAKb,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUjB,KAAQ+B,MAPnB,2C,GA9BLK,a,MCGlBC,IAASC,OACP,kBAAC,EAAD,MAAQC,SAASC,eAAe,SNuH5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.a4daab04.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) =>{\n   \n    \n    return(\n        \n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2> {name}</h2>\n                <h3> {email}</h3>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst Cardlist = ({data}) =>{\n    \n    return (\n        <div>\n        {\n            data.map((robot) => {\n                \n                return(\n                    \n                    <Card \n                        key={robot.id} \n                        id={robot.id} \n                        name={robot.name} \n                        email={robot.email}\n                    />\n                );\n            })\n            \n        }\n        \n           \n        \n        </div>\n    )       \n}\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({searchChange}) =>{\n    return(\n        <div className='pa2'>\n        <input\n            className='pa3 ba b--green bg-lightest-blue' \n            type='search' \n            placeholder='Search Robots'\n            onChange={searchChange}\n        />\n       \n        </div>\n    \n\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return(\n        <div style={{overflow: 'scroll',border: '5px solid black', height:'800px'}}>\n        {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React,{Component} from 'react';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state={\n            robots:[],\n            searchfield:''\n        }\n        \n    }\n    componentDidMount(){\n    \n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({robots:users}));\n        \n    }\n     onSearchChange = (event) =>{\n        this.setState({searchfield: event.target.value})\n        \n\n    }\n    render(){\n            \n            const { robots, searchfield } = this.state;\n            \n            const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n             \n            }) //if its not zero, turn it into true.\n            if (!robots.length){\n                return <h1>Loading</h1>\n            }else{\n                return(\n                    <div className='tc'>\n                        <h1>RoboFriends</h1>\n                        <SearchBox searchChange={this.onSearchChange}/>\n                        <Scroll>\n                        <Cardlist data = {filteredRobots} />\n                        </Scroll>\n                    </div>\n                    \n                );\n            }\n        \n       \n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App'\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}